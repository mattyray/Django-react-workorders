===== Dockerfile =====
# Use official Python image as base
FROM python:3.10.4-slim-bullseye

# Set environment variables
ENV PIP_DISABLE_PIP_VERSION_CHECK=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Set work directory
WORKDIR /code

# Install Python dependencies
COPY ./requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy project files
COPY . .

# Run Gunicorn (production use)
CMD ["sh", "-c", "gunicorn django_project.wsgi --bind 0.0.0.0:${PORT:-8000}"]

===== docker-compose.yml =====
services:
  web:
    build:
      context: .  # 👈 ONLY backend is built
    working_dir: /code/backend    # 👈 Set working dir to /code
    command: python manage.py runserver 0.0.0.0:8002
    ports:
      - "8002:8002"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - "DJANGO_DEBUG=True"
      - "DJANGO_SECURE_SSL_REDIRECT=False"
      - "DJANGO_SECURE_HSTS_SECONDS=0"
      - "DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS=False"
      - "DJANGO_SECURE_HSTS_PRELOAD=False"
      - "DJANGO_SESSION_COOKIE_SECURE=False"
      - "DJANGO_CSRF_COOKIE_SECURE=False"
      - "DATABASE_URL=postgresql://postgres:postgres@db:5432/art_moving"
    volumes:
      - .:/code   # 👈 Mount only the backend
    networks:
      - art_moving_network


  db:
    image: postgres:15
    container_name: art_moving_react_db
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: art_moving
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 5
    networks:
      - art_moving_network

volumes:
  postgres_data:

networks:
  art_moving_network:

===== docker-compose-prod.yml =====
services:
  web:
    build: .
    command: gunicorn django_project.wsgi --bind 0.0.0.0:$PORT
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - "DJANGO_DEBUG=False"
      - "DJANGO_SECURE_SSL_REDIRECT=True"
      - "DJANGO_SECURE_HSTS_SECONDS=2592000"  # 30 days
      - "DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS=True"
      - "DJANGO_SECURE_HSTS_PRELOAD=True"
      - "DJANGO_SESSION_COOKIE_SECURE=True"
      - "DJANGO_CSRF_COOKIE_SECURE=True"
      - "PORT=8000"  # Needed for Heroku
      - "DATABASE_URL=${DATABASE_URL}"
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
      timeout: 5s

volumes:
  postgres_data:

===== heroku.yml =====
build:
  docker:
    web: Dockerfile  # Tells Heroku to use the Dockerfile to build your app

release:
  image: web
  command:
    - python manage.py migrate  # Runs database migrations
    - python manage.py collectstatic --noinput  # Collects static files

run:
  web: gunicorn django_project.wsgi --bind 0.0.0.0:$PORT  # Starts the app

===== requirements.txt =====
asgiref==3.8.1
Django==5.1.6
django-crispy-forms==2.4
django-environ==0.12.0
djangorestframework==3.15.1
django-cors-headers==4.3.1
gunicorn==23.0.0
psycopg2-binary==2.9.10
sqlparse==0.5.3
whitenoise==6.9.0

===== backend/manage.py =====
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

===== backend/django_project/asgi.py =====
"""
ASGI config for django_project project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings')

application = get_asgi_application()

===== backend/django_project/wsgi.py =====
"""
WSGI config for django_project project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings')

application = get_wsgi_application()

===== backend/django_project/settings.py =====
from environ import Env
from pathlib import Path
import os

# Initialize environment variables
env = Env()
Env.read_env()

# Base directory
BASE_DIR = Path(__file__).resolve().parent.parent

# ✅ Security settings
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")  # Required for Heroku

# Secret Key & Debug Mode
SECRET_KEY = env("DJANGO_SECRET_KEY", default="No Secret Key Found")
DEBUG = env.bool("DJANGO_DEBUG", default=False)

# ✅ Allowed Hosts
ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS", default=[
    "localhost",
    "127.0.0.1",
    "0.0.0.0",
])

# ✅ Installed Apps
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Custom apps
    'workorders',

    # Third-party packages
    "rest_framework",
    "corsheaders",

]

# ✅ Middleware
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # 🛑 Put CORS middleware at the top!
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ✅ URL Configuration
ROOT_URLCONF = 'django_project.urls'

# ✅ Templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],  # Include custom templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# ✅ WSGI Application
WSGI_APPLICATION = 'django_project.wsgi.application'

# ✅ Database Configuration
DATABASES = {
    "default": env.db_url("DATABASE_URL")
}



# ✅ Password Validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# ✅ Localization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / "static"]  # 👈 crucial for collectstatic to find non-app static files
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# ✅ Default Primary Key
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ✅ Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# ✅ Login & Logout
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = "/"  

# ✅ Security Settings for Production
if not DEBUG:
    SECURE_SSL_REDIRECT = env.bool("DJANGO_SECURE_SSL_REDIRECT", default=True)
    SECURE_HSTS_SECONDS = env.int("DJANGO_SECURE_HSTS_SECONDS", default=2592000)  # 30 days
    SECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool("DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS", default=True)
    SECURE_HSTS_PRELOAD = env.bool("DJANGO_SECURE_HSTS_PRELOAD", default=True)
    SESSION_COOKIE_SECURE = env.bool("DJANGO_SESSION_COOKIE_SECURE", default=True)
    CSRF_COOKIE_SECURE = env.bool("DJANGO_CSRF_COOKIE_SECURE", default=True)
else:
    SECURE_SSL_REDIRECT = False
    SECURE_HSTS_SECONDS = 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False


STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

CORS_ALLOW_ALL_ORIGINS = True  # 👈 For development only

===== backend/django_project/urls.py =====
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path("admin/", admin.site.urls),
    path("api/workorders/", include("workorders.urls")),  # Our main API routes
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

===== backend/workorders/models.py =====
from django.db import models
from django.conf import settings

class WorkOrder(models.Model):
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('in_progress', 'In Progress'),
        ('completed', 'Completed'),
    ]
    client_name = models.CharField(max_length=255, blank=True)  # Changed from FK to charfield
    job_description = models.TextField(blank=True, null=True)
    estimated_cost = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        blank=True,
        null=True
    )
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    completed_at = models.DateTimeField(blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"WorkOrder #{self.id} for {self.client_name}"

    def update_status(self):
        if self.status == 'completed':
            return
        if self.events.filter(date__isnull=False).exists():
            self.status = 'in_progress'
        else:
            self.status = 'pending'
        # Optional:
        # self.save()



class JobAttachment(models.Model):
    work_order = models.ForeignKey(WorkOrder, on_delete=models.CASCADE, related_name='attachments')
    file = models.FileField(upload_to='job_attachments/')
    uploaded_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Attachment {self.id} for WorkOrder {self.work_order.id}"


class JobNote(models.Model):
    work_order = models.ForeignKey(WorkOrder, on_delete=models.CASCADE, related_name='notes')
    note = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Note {self.id} for WorkOrder {self.work_order.id}"
    

class Event(models.Model):
    EVENT_TYPES = [
        ('pickup', 'Pickup'),
        ('pickup_wrap', 'Pickup and Wrap'),
        ('wrap', 'Wrap'),
        ('install', 'Install'),
        ('deliver_install', 'Deliver and Install'),
        ('dropoff', 'Drop Off'),
    ]
    work_order = models.ForeignKey(WorkOrder, on_delete=models.CASCADE, related_name='events')
    event_type = models.CharField(max_length=30, choices=EVENT_TYPES)
    address = models.CharField(max_length=255, blank=True)
    date = models.DateField(blank=True, null=True)

    def __str__(self):
        return f"{self.get_event_type_display()} for WorkOrder #{self.work_order.id}"
===== backend/workorders/serializers.py =====
from rest_framework import serializers
from .models import WorkOrder, Event, JobAttachment, JobNote

class EventSerializer(serializers.ModelSerializer):
    # mark work_order as read-only so DRF won't expect it in the input
    work_order = serializers.PrimaryKeyRelatedField(read_only=True)

    class Meta:
        model = Event
        fields = ['event_type', 'address', 'date', 'work_order']

class JobAttachmentSerializer(serializers.ModelSerializer):
    class Meta:
        model = JobAttachment
        fields = '__all__'

class JobNoteSerializer(serializers.ModelSerializer):
    class Meta:
        model = JobNote
        fields = '__all__'

class WorkOrderSerializer(serializers.ModelSerializer):
    # Remove read_only so we can accept writes
    events = EventSerializer(many=True)
    attachments = JobAttachmentSerializer(many=True, read_only=True)
    notes = JobNoteSerializer(many=True, read_only=True)

    class Meta:
        model = WorkOrder
        fields = '__all__'
        read_only_fields = ['id', 'created_at', 'updated_at']

    def create(self, validated_data):
        events_data = validated_data.pop('events', [])
        workorder = WorkOrder.objects.create(**validated_data)
        for event_data in events_data:
            Event.objects.create(work_order=workorder, **event_data)
        return workorder

    def update(self, instance, validated_data):
        # Pull off any nested events (if provided)
        events_data = validated_data.pop('events', None)

        # Update the WorkOrder itself
        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        instance.save()

        if events_data is not None:
            # Simple strategy: delete all old events and recreate
            instance.events.all().delete()
            for event_data in events_data:
                Event.objects.create(work_order=instance, **event_data)

        return instance
===== backend/workorders/views.py =====
from rest_framework import generics
from .models import WorkOrder
from .serializers import WorkOrderSerializer

class WorkOrderListCreateView(generics.ListCreateAPIView):
    queryset = WorkOrder.objects.all()
    serializer_class = WorkOrderSerializer

class WorkOrderRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    queryset = WorkOrder.objects.all()
    serializer_class = WorkOrderSerializer

===== backend/workorders/urls.py =====
from django.urls import path
from .views import WorkOrderListCreateView, WorkOrderRetrieveUpdateDestroyView

urlpatterns = [
    path('', WorkOrderListCreateView.as_view(), name='workorder-list-create'),
    path('<int:pk>/', WorkOrderRetrieveUpdateDestroyView.as_view(), name='workorder-detail'),
]

===== backend/workorders/admin.py =====
from django.contrib import admin
from .models import WorkOrder, Event, JobAttachment, JobNote

class EventInline(admin.TabularInline):
    model = Event
    extra = 1  # Number of extra empty forms

class WorkOrderAdmin(admin.ModelAdmin):
    inlines = [EventInline]
    list_display = ['id', 'client_name', 'job_description', 'status']
    search_fields = ['client__name', 'job_description']
    list_filter = ['status', 'created_at', 'updated_at']

admin.site.register(WorkOrder, WorkOrderAdmin)
admin.site.register(JobAttachment)
admin.site.register(JobNote)

===== frontend/package.json =====
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@fullcalendar/common": "^5.11.5",
    "@fullcalendar/daygrid": "^6.1.17",
    "@fullcalendar/react": "^6.1.17",
    "axios": "^1.9.0",
    "react": "^19.0.0",
    "react-calendar": "^5.1.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.22.0",
    "@tailwindcss/postcss": "^4.1.5",
    "@tailwindcss/vite": "^4.1.5",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.22.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "postcss": "^8.5.3",
    "tailwindcss": "^4.1.5",
    "vite": "^6.3.1"
  }
}

===== frontend/vite.config.js =====
// frontend/vite.config.js
import { defineConfig } from 'vite'
import react             from '@vitejs/plugin-react'
import tailwindcss       from '@tailwindcss/vite'

export default defineConfig({
  plugins: [
    react(),
    tailwindcss(),    // ← our new Tailwind plugin for Vite
  ],
})

===== frontend/index.html =====
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

===== frontend/src/App.jsx =====
import React        from 'react';
import AppRouter    from './Router.jsx';

export default function App() {
  return <AppRouter />;
}

===== frontend/src/Router.jsx =====
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Home                    from './pages/Home.jsx';
import WorkOrders              from './pages/WorkOrders.jsx';
import CreateWorkOrderPage     from './pages/CreateWorkOrderPage.jsx';
import WorkOrderDetailPage     from './pages/WorkOrderDetailPage.jsx';
import EditWorkOrderPage       from './pages/EditWorkOrderPage.jsx';
import Navbar                  from './components/Navbar.jsx';
import Footer                  from './components/Footer.jsx';

export default function AppRouter() {
  return (
    <Router>
      <div className="flex flex-col min-h-screen">
        <Navbar />
        <main className="flex-1">
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/workorders" element={<WorkOrders />} />
            <Route path="/workorders/new" element={<CreateWorkOrderPage />} />
            <Route path="/workorders/:id" element={<WorkOrderDetailPage />} />
            <Route path="/workorders/:id/edit" element={<EditWorkOrderPage />} />
          </Routes>
        </main>
        <Footer />
      </div>
    </Router>
  );
}

===== frontend/src/main.jsx =====
import React, { StrictMode } from 'react';
import { createRoot }      from 'react-dom/client';
import './index.css';
import App                 from './App.jsx';

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
);

===== frontend/src/index.css =====
@import "tailwindcss";

===== frontend/src/App.css =====
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

===== frontend/src/components/EventForm.jsx =====
import { useState } from 'react';

function EventForm({ workOrderId, onEventAdded }) {
  const [eventType, setEventType] = useState('pickup');
  const [address, setAddress] = useState('');
  const [date, setDate] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!address || !date) return;

    onEventAdded(workOrderId, {
      event_type: eventType,
      address,
      date,
    });

    // Reset
    setEventType('pickup');
    setAddress('');
    setDate('');
  };

  return (
    <form onSubmit={handleSubmit} style={{ marginTop: '1rem' }}>
      <h5 style={{ marginBottom: '0.5rem' }}>Add Event</h5>
      <div>
        <label>Type</label><br />
        <select value={eventType} onChange={(e) => setEventType(e.target.value)}>
          <option value="pickup">Pickup</option>
          <option value="install">Install</option>
          <option value="dropoff">Dropoff</option>
          <option value="wrap">Wrap</option>
        </select>
      </div>
      <div>
        <label>Address</label><br />
        <input
          type="text"
          value={address}
          onChange={(e) => setAddress(e.target.value)}
          required
        />
      </div>
      <div>
        <label>Date</label><br />
        <input
          type="date"
          value={date}
          onChange={(e) => setDate(e.target.value)}
          required
        />
      </div>
      <button type="submit" style={{ marginTop: "0.5rem" }}>
        Add
      </button>
    </form>
  );
}

export default EventForm;

===== frontend/src/components/Footer.jsx =====
function Footer() {
    const footerWrapperStyle = {
      background: "#1a1a1a",
      padding: "1rem 0",
      color: "white",
      textAlign: "center",
    };
  
    const containerStyle = {
      maxWidth: '1200px',
      margin: '0 auto',
      padding: '0 2rem',
    };
  
    return (
      <footer style={footerWrapperStyle}>
        <div style={containerStyle}>
          © 2025 Work Orders App
        </div>
      </footer>
    );
  }
  
  export default Footer;
  
===== frontend/src/components/Navbar.jsx =====
import { Link, useLocation } from 'react-router-dom';

function Navbar() {
  const location = useLocation();

  const navWrapperStyle = {
    backgroundColor: '#1a1a1a',
    padding: '1rem 0',   // <-- no side padding here
  };

  const containerStyle = {
    maxWidth: '1200px',
    margin: '0 auto',
    padding: '0 2rem',  // <-- now inside container
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
    color: 'white',
    fontFamily: 'Arial, sans-serif',
  };

  const linkStyle = {
    color: 'white',
    textDecoration: 'none',
    marginLeft: '1rem',
    fontWeight: 'bold',
    fontSize: '1rem',
    paddingBottom: '2px',
    borderBottom: '2px solid transparent',
  };

  const activeLinkStyle = {
    ...linkStyle,
    borderBottom: '2px solid #4CAF50',
  };

  return (
    <nav style={navWrapperStyle}>
      <div style={containerStyle}>
        <div style={{ fontWeight: 'bold', fontSize: '1.5rem' }}>
          WorkOrdersApp
        </div>
        <div>
          <Link
            to="/"
            style={location.pathname === '/' ? activeLinkStyle : linkStyle}
          >
            Home
          </Link>
          <Link
            to="/workorders"
            style={location.pathname === '/workorders' ? activeLinkStyle : linkStyle}
          >
            Work Orders
          </Link>
        </div>
      </div>
    </nav>
  );
}

export default Navbar;

===== frontend/src/components/WorkOrderForm.jsx =====
import { useState } from 'react';

function WorkOrderForm({ onAddWorkOrder }) {
  const [clientName, setClientName] = useState('');
  const [jobDescription, setJobDescription] = useState('');
  const [status, setStatus] = useState('pending');

  const handleSubmit = (e) => {
    e.preventDefault();

    const newOrder = {
      client_name: clientName,
      job_description: jobDescription,
      status: status,
    };

    onAddWorkOrder(newOrder);

    // Clear the form
    setClientName('');
    setJobDescription('');
    setStatus('pending');
  };

  return (
    <form onSubmit={handleSubmit} style={{ marginBottom: '2rem', textAlign: 'left', maxWidth: '600px', marginInline: 'auto' }}>
      <h2 style={{ textAlign: 'center', marginBottom: '1rem' }}>Add New Work Order</h2>

      <div style={{ marginBottom: '1rem' }}>
        <label>Client Name</label>
        <input
          type="text"
          value={clientName}
          onChange={(e) => setClientName(e.target.value)}
          required
          style={{ width: '100%', padding: '0.5rem', marginTop: '0.5rem' }}
        />
      </div>

      <div style={{ marginBottom: '1rem' }}>
        <label>Job Description</label>
        <textarea
          value={jobDescription}
          onChange={(e) => setJobDescription(e.target.value)}
          required
          style={{ width: '100%', padding: '0.5rem', marginTop: '0.5rem', minHeight: '100px' }}
        />
      </div>

      <div style={{ marginBottom: '1rem' }}>
        <label>Status</label>
        <select
          value={status}
          onChange={(e) => setStatus(e.target.value)}
          style={{ width: '100%', padding: '0.5rem', marginTop: '0.5rem' }}
        >
          <option value="pending">Pending</option>
          <option value="in_progress">In Progress</option>
          <option value="completed">Completed</option>
        </select>
      </div>

      <button
        type="submit"
        style={{
          backgroundColor: '#4CAF50',
          color: 'white',
          padding: '0.75rem 1.5rem',
          border: 'none',
          borderRadius: '4px',
          cursor: 'pointer',
          width: '100%',
          fontSize: '1rem',
        }}
      >
        Add Work Order
      </button>
    </form>
  );
}

export default WorkOrderForm;

===== frontend/src/components/WorkOrderList.jsx =====
import EventForm from './EventForm';
import { formatDate } from '../utils/formatDate';

function getEventIcon(type) {
  switch (type) {
    case 'pickup':
      return '📦';
    case 'install':
      return '🛠';
    case 'dropoff':
      return '📍';
    case 'wrap':
      return '🎁';
    default:
      return '📅';
  }
}

function WorkOrderList({ workOrders, onAddEvent }) {
  if (workOrders.length === 0) {
    return <p>No work orders available.</p>;
  }

  return (
    <div
      style={{
        display: "grid",
        gridTemplateColumns: "repeat(auto-fit, minmax(300px, 1fr))",
        gap: "1rem",
      }}
    >
      {workOrders.map((order) => (
        <div
          key={order.id}
          style={{
            border: "1px solid #ccc",
            borderRadius: "8px",
            padding: "1rem",
            backgroundColor: "#2a2a2a",
            color: "white",
            textAlign: "left",
          }}
        >
          <h3 style={{ marginBottom: "0.5rem" }}>
            {order.client_name || "Untitled Work Order"}
          </h3>
          <p style={{ marginBottom: "0.5rem" }}>{order.job_description}</p>
          <p style={{ fontSize: "0.9rem", color: "#4CAF50" }}>{order.status}</p>

          {/* Events List */}
          {order.events?.length > 0 && (
            <>
              <h4 style={{ marginTop: "1rem" }}>Scheduled Events:</h4>
              <ul style={{ paddingLeft: "1rem", fontSize: "0.9rem" }}>
                {order.events.map((event, index) => (
                  <li key={index} style={{ marginBottom: "0.5rem" }}>
                    <span style={{ marginRight: "0.5rem" }}>{getEventIcon(event.event_type)}</span>
                    <strong>{event.event_type.replace('_', ' ')}</strong>
                    <br />
                    <span style={{ color: "#bbb" }}>{event.address}</span>
                    <br />
                    <span style={{ fontSize: "0.85rem", color: "#4CAF50" }}>
                      {formatDate(event.date)}
                    </span>
                  </li>
                ))}
              </ul>
            </>
          )}

          {/* Event Form */}
          <EventForm workOrderId={order.id} onEventAdded={onAddEvent} />
        </div>
      ))}
    </div>
  );
}

export default WorkOrderList;

===== frontend/src/pages/CreateWorkOrderPage.jsx =====
import React, { useState } from 'react';
import { useNavigate }      from 'react-router-dom';
import axios                from 'axios';

export default function CreateWorkOrderPage() {
  const navigate = useNavigate();
  const [form, setForm] = useState({
    client_name: '',
    job_description: '',
    status: 'pending',
    events: [],
  });

  const addEvent = () =>
    setForm(f => ({
      ...f,
      events: [...f.events, { event_type: 'pickup', address: '', date: '' }],
    }));

  const updateEvent = (i, key, val) =>
    setForm(f => {
      const ev = [...f.events];
      ev[i] = { ...ev[i], [key]: val };
      return { ...f, events: ev };
    });

  const removeEvent = i =>
    setForm(f => {
      const ev = [...f.events];
      ev.splice(i, 1);
      return { ...f, events: ev };
    });

  const handleSubmit = async e => {
    e.preventDefault();
    try {
      await axios.post('http://localhost:8002/api/workorders/', form);
      navigate('/workorders');
    } catch (err) {
      console.error(err);
    }
  };

  return (
    <div className="container mx-auto p-6 space-y-6">
      <h1 className="text-2xl font-bold">New Work Order</h1>
      <form onSubmit={handleSubmit} className="space-y-4">
        <input
          type="text"
          placeholder="Client Name"
          value={form.client_name}
          onChange={e => setForm(f => ({ ...f, client_name: e.target.value }))}
          className="w-full p-2 border rounded"
          required
        />
        <textarea
          placeholder="Job Description"
          value={form.job_description}
          onChange={e => setForm(f => ({ ...f, job_description: e.target.value }))}
          className="w-full p-2 border rounded"
          rows={4}
        />
        <select
          value={form.status}
          onChange={e => setForm(f => ({ ...f, status: e.target.value }))}
          className="w-full p-2 border rounded"
        >
          <option value="pending">Pending</option>
          <option value="in_progress">In Progress</option>
          <option value="completed">Completed</option>
        </select>

        <div>
          <h2 className="text-xl font-semibold mb-2">Events</h2>
          {form.events.map((ev, i) => (
            <div key={i} className="mb-4 p-4 border rounded space-y-2">
              <div className="flex justify-end">
                <button
                  type="button"
                  onClick={() => removeEvent(i)}
                  className="text-red-500"
                >
                  Remove
                </button>
              </div>
              <select
                value={ev.event_type}
                onChange={e => updateEvent(i, 'event_type', e.target.value)}
                className="w-full p-2 border rounded"
              >
                <option value="pickup">Pickup</option>
                <option value="install">Install</option>
                <option value="dropoff">Drop Off</option>
                <option value="wrap">Wrap</option>
              </select>
              <input
                type="text"
                placeholder="Address"
                value={ev.address}
                onChange={e => updateEvent(i, 'address', e.target.value)}
                className="w-full p-2 border rounded"
                required
              />
              <input
                type="date"
                value={ev.date}
                onChange={e => updateEvent(i, 'date', e.target.value)}
                className="w-full p-2 border rounded"
                required
              />
            </div>
          ))}
          <button
            type="button"
            onClick={addEvent}
            className="bg-gray-200 hover:bg-gray-300 px-4 py-2 rounded"
          >
            Add Event
          </button>
        </div>

        <button
          type="submit"
          className="bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded"
        >
          Create Work Order
        </button>
      </form>
    </div>
  );
}

===== frontend/src/pages/EditWorkOrderPage.jsx =====
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate }      from 'react-router-dom';
import axios                            from 'axios';

export default function EditWorkOrderPage() {
  const { id }              = useParams();
  const navigate            = useNavigate();
  const [form, setForm]     = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    setLoading(true);
    axios
      .get(`http://localhost:8002/api/workorders/${id}/`)
      .then(res => setForm(res.data))
      .catch(console.error)
      .finally(() => setLoading(false));
  }, [id]);

  if (loading) return <p>Loading…</p>;
  if (!form)  return <p>Work order not found.</p>;

  const addEvent = () =>
    setForm(f => ({
      ...f,
      events: [...f.events, { event_type: 'pickup', address: '', date: '' }],
    }));

  const updateEvent = (i, key, val) =>
    setForm(f => {
      const ev = [...f.events];
      ev[i] = { ...ev[i], [key]: val };
      return { ...f, events: ev };
    });

  const removeEvent = i =>
    setForm(f => {
      const ev = [...f.events];
      ev.splice(i, 1);
      return { ...f, events: ev };
    });

  const handleSubmit = async e => {
    e.preventDefault();
    console.log('🔔 handleSubmit fired, payload:', form);
    try {
      const res = await axios.put(
        `http://localhost:8002/api/workorders/${id}/`,
        form
      );
      console.log('🟢 Response from server:', res);
      navigate(`/workorders/${id}`);
    } catch (err) {
      console.error('🔴 Error in save:', err);
    }
  };

  return (
    <div className="container mx-auto p-6 space-y-6">
      <h1 className="text-2xl font-bold">Edit Work Order #{id}</h1>
      <form onSubmit={handleSubmit} className="space-y-4">
        {/* Client Name */}
        <input
          type="text"
          placeholder="Client Name"
          value={form.client_name}
          onChange={e => setForm(f => ({ ...f, client_name: e.target.value }))}
          className="w-full p-2 border rounded"
          required
        />

        {/* Job Description */}
        <textarea
          placeholder="Job Description"
          value={form.job_description}
          onChange={e =>
            setForm(f => ({ ...f, job_description: e.target.value }))
          }
          className="w-full p-2 border rounded"
          rows={4}
        />

        {/* Status */}
        <select
          value={form.status}
          onChange={e => setForm(f => ({ ...f, status: e.target.value }))}
          className="w-full p-2 border rounded"
        >
          <option value="pending">Pending</option>
          <option value="in_progress">In Progress</option>
          <option value="completed">Completed</option>
        </select>

        {/* Events */}
        <div>
          <h2 className="text-xl font-semibold mb-2">Events</h2>
          {form.events.map((ev, i) => (
            <div key={i} className="mb-4 p-4 border rounded space-y-2">
              <div className="flex justify-end">
                <button
                  type="button"
                  onClick={() => removeEvent(i)}
                  className="text-red-500"
                >
                  Remove
                </button>
              </div>
              <select
                value={ev.event_type}
                onChange={e => updateEvent(i, 'event_type', e.target.value)}
                className="w-full p-2 border rounded"
              >
                <option value="pickup">Pickup</option>
                <option value="install">Install</option>
                <option value="dropoff">Drop Off</option>
                <option value="wrap">Wrap</option>
              </select>
              <input
                type="text"
                placeholder="Address"
                value={ev.address}
                onChange={e => updateEvent(i, 'address', e.target.value)}
                className="w-full p-2 border rounded"
                required
              />
              <input
                type="date"
                value={ev.date}
                onChange={e => updateEvent(i, 'date', e.target.value)}
                className="w-full p-2 border rounded"
                required
              />
            </div>
          ))}
          <button
            type="button"
            onClick={addEvent}
            className="bg-gray-200 hover:bg-gray-300 px-4 py-2 rounded"
          >
            Add Event
          </button>
        </div>

        {/* Save */}
        <button
          type="submit"
          className="bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded"
        >
          Save Changes
        </button>
      </form>
    </div>
  );
}

===== frontend/src/pages/Home.jsx =====
import React from 'react';
import FullCalendar from '@fullcalendar/react';
import dayGridPlugin from '@fullcalendar/daygrid';
import { Link } from 'react-router-dom';

export default function Home() {
  const events = [
    { title: 'Pickup for Order #1', date: '2025-05-03' },
    { title: 'Install for Order #2', date: '2025-05-10' },
    { title: 'Drop-off for Order #3', date: '2025-05-15' },
  ];

  return (
    <main className="min-h-screen bg-gradient-to-r from-blue-500 to-indigo-600 text-white">
      {/* Hero */}
      <section className="min-h-[70vh] flex flex-col items-center justify-center px-6">
        <h1 className="text-4xl md:text-6xl font-bold mb-4 drop-shadow-lg">
          Streamline Your Work Orders
        </h1>
        <p className="text-lg md:text-2xl mb-8 text-center max-w-2xl">
          Quickly create, schedule, and track every job—all in one place.
        </p>
        <Link
          to="/workorders"
          className="bg-white text-blue-600 font-semibold px-6 py-3 rounded-full shadow-md hover:shadow-lg transition-shadow duration-200"
        >
          Get Started
        </Link>
      </section>

      {/* Features */}
      <section className="py-12 bg-gray-50 text-gray-800 dark:bg-gray-800 dark:text-gray-200">
        <div className="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-8 px-6">
          <div className="bg-white dark:bg-gray-700 rounded-xl shadow-md p-6 text-center">
            <div className="text-5xl mb-4">📝</div>
            <h3 className="text-xl font-semibold mb-2">Create Orders</h3>
            <p>Easy form to add new jobs.</p>
          </div>
          <div className="bg-white dark:bg-gray-700 rounded-xl shadow-md p-6 text-center">
            <div className="text-5xl mb-4">📅</div>
            <h3 className="text-xl font-semibold mb-2">Schedule Events</h3>
            <p>Pickups, installs, drop-offs.</p>
          </div>
          <div className="bg-white dark:bg-gray-700 rounded-xl shadow-md p-6 text-center">
            <div className="text-5xl mb-4">📊</div>
            <h3 className="text-xl font-semibold mb-2">Track Status</h3>
            <p>Always know what’s in progress.</p>
          </div>
        </div>
      </section>

      {/* Calendar */}
      <section className="py-12 bg-white text-gray-800 dark:bg-gray-900 dark:text-gray-200">
        <div className="max-w-4xl mx-auto px-6">
          <h2 className="text-2xl font-semibold mb-4 text-center">Upcoming Events</h2>
          <FullCalendar
            plugins={[dayGridPlugin]}
            initialView="dayGridMonth"
            events={events}
            height="auto"
          />
        </div>
      </section>
    </main>
  );
}

===== frontend/src/pages/WorkOrderDetailPage.jsx =====
import React, { useState, useEffect }  from 'react';
import { useParams, useNavigate }      from 'react-router-dom';
import axios                            from 'axios';
import { formatDate }                   from '../utils/formatDate';

export default function WorkOrderDetailPage() {
  const { id } = useParams();
  const navigate = useNavigate();
  const [order, setOrder] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    axios
      .get(`http://localhost:8002/api/workorders/${id}/`)
      .then((res) => setOrder(res.data))
      .catch(console.error)
      .finally(() => setLoading(false));
  }, [id]);

  if (loading) return <p>Loading...</p>;
  if (!order) return <p>Work order not found.</p>;

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold">Work Order #{order.id}</h1>
        <button
          onClick={() => navigate(`/workorders/${id}/edit`)}
          className="bg-yellow-500 hover:bg-yellow-600 text-white py-2 px-4 rounded"
        >
          Edit
        </button>
      </div>
      <div className="space-y-2">
        <p><strong>Client:</strong> {order.client_name}</p>
        <p><strong>Description:</strong> {order.job_description}</p>
        <p><strong>Status:</strong> {order.status.replace('_',' ')}</p>
        <p><strong>Created:</strong> {formatDate(order.created_at)}</p>
      </div>
      <div>
        <h2 className="text-xl font-semibold mb-2">Events</h2>
        {order.events.length === 0 ? (
          <p>No scheduled events.</p>
        ) : (
          <ul className="list-disc list-inside space-y-1">
            {order.events.map((e) => (
              <li key={e.id}>
                {e.event_type.replace('_',' ')} at {e.address} on {formatDate(e.date)}
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
}

===== frontend/src/pages/WorkOrders.jsx =====
import React, { useState, useEffect } from 'react';
import { Link, useNavigate }             from 'react-router-dom';
import { fetchWorkOrders }                from '../services/api';

export default function WorkOrders() {
  const [workOrders, setWorkOrders] = useState([]);
  const [loading, setLoading]       = useState(true);
  const navigate                    = useNavigate();

  useEffect(() => {
    (async () => {
      try {
        const res = await fetchWorkOrders();
        setWorkOrders(res.data);
      } catch (e) {
        console.error(e);
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  const statusBadge = (status) => {
    const base = 'px-2 py-1 rounded-full text-xs font-semibold inline-block';
    if (status === 'pending')     return `${base} bg-yellow-100 text-yellow-800`;
    if (status === 'in_progress') return `${base} bg-blue-100   text-blue-800`;
    if (status === 'completed')   return `${base} bg-green-100  text-green-800`;
    return base;
  };

  return (
    <div className="container mx-auto p-6">
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-3xl font-bold">Work Orders</h1>
        <Link
          to="/workorders/new"
          className="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded"
        >
          New Work Order
        </Link>
      </div>

      {loading ? (
        <p>Loading work orders...</p>
      ) : (
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                {['ID','Client','Status','Created'].map((h) => (
                  <th
                    key={h}
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase"
                  >
                    {h}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {workOrders.map((o) => (
                <tr
                  key={o.id}
                  className="hover:bg-gray-50 cursor-pointer"
                  onClick={() => navigate(`/workorders/${o.id}`)}
                >
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                    {o.id}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {o.client_name || '—'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={statusBadge(o.status)}>
                      {o.status.replace('_', ' ')}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {new Date(o.created_at).toLocaleDateString()}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}

===== frontend/src/services/api.jsx =====
// src/services/api.js
import axios from 'axios';

const API_BASE = 'http://localhost:8002/api';

export const fetchWorkOrders = () => axios.get(`${API_BASE}/workorders/`);
export const createWorkOrder = (data) => axios.post(`${API_BASE}/workorders/`, data);
export const createEvent = (workOrderId, data) =>
    axios.post(`${API_BASE}/events/`, { ...data, work_order: workOrderId });
  

===== frontend/src/utils/formatDate.js =====
export function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString(undefined, {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });
  }
  